import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import math

def chi_square_p_value(chi_square, df):
    """Calculates p-value manually using gamma function approximation."""
    k = df / 2.0
    x = chi_square / 2.0
    gamma = math.gamma(k)
    upper_incomplete_gamma = math.gamma(k) * math.exp(-x) * sum([(x ** i) / math.gamma(i + 1) for i in range(int(k))])
    return upper_incomplete_gamma / gamma

def hardy_weinberg_test_vdr(genotype_counts):
    """Performs Hardy-Weinberg Equilibrium test for VDR FokI using chi-square."""
    total = sum(genotype_counts.values())
    p = (2 * genotype_counts.get('AA', 0) + genotype_counts.get('AG', 0)) / (2 * total)
    q = 1 - p
    expected_AA = (p ** 2) * total
    expected_AG = (2 * p * q) * total
    expected_GG = (q ** 2) * total
    observed = [genotype_counts.get('AA', 0), genotype_counts.get('AG', 0), genotype_counts.get('GG', 0)]
    expected = [expected_AA, expected_AG, expected_GG]
    chi_square = sum([(o - e) ** 2 / e for o, e in zip(observed, expected) if e > 0])
    p_value = chi_square_p_value(chi_square, df=1)
    return chi_square, p_value, observed, expected

def hardy_weinberg_test_bsm(genotype_counts):
    """Performs Hardy-Weinberg Equilibrium test for BSM using chi-square."""
    total = sum(genotype_counts.values())
    p = (2 * genotype_counts.get('CC', 0) + genotype_counts.get('CT', 0)) / (2 * total)
    q = 1 - p
    expected_CC = (p ** 2) * total
    expected_CT = (2 * p * q) * total
    expected_TT = (q ** 2) * total
    observed = [genotype_counts.get('CC', 0), genotype_counts.get('CT', 0), genotype_counts.get('TT', 0)]
    expected = [expected_CC, expected_CT, expected_TT]
    chi_square = sum([(o - e) ** 2 / e for o, e in zip(observed, expected) if e > 0])
    p_value = chi_square_p_value(chi_square, df=1)
    return chi_square, p_value, observed, expected

def count_alleles(group, column):
    """Counts the number of A/G (for VDR FokI) or T/C (for BSM) alleles in Cancer and Control groups."""
    allele_counts = {"A": 0, "G": 0} if column == "VDR_FokI" else {"T": 0, "C": 0}
    for genotype in group[column].dropna():
        for allele in str(genotype):
            if allele in allele_counts:
                allele_counts[allele] += 1
    return allele_counts

def odds_ratio(a, b, c, d):
    """Calculates Odds Ratio with continuity correction."""
    a += 0.5
    b += 0.5
    c += 0.5
    d += 0.5
    return (a * d) / (b * c)

st.title("Analiza biostatystyczna")

st.sidebar.header("Upload Dataset")
uploaded_file = st.sidebar.file_uploader("Upload CSV file", type=["csv"])

if uploaded_file is not None:
    df = pd.read_csv(dane.csv)
    df = df.drop(columns=['Unnamed: 3', 'Unnamed: 4', 'Unnamed: 5', 'Unnamed: 7'], errors='ignore')
    df.rename(columns={'Grupa': 'Group', 'VDR FokI': 'VDR_FokI', 'BSM': 'BSM'}, inplace=True)
    
    # Initial Data Visualizations
    st.subheader("Dystrybucja genotypów")
    fig, ax = plt.subplots()
    sns.countplot(x='VDR_FokI', data=df, palette="coolwarm", ax=ax)
    ax.set_title("VDR FokI")
    st.pyplot(fig)
    
    fig, ax = plt.subplots()
    sns.countplot(x='BSM', data=df, palette="coolwarm", ax=ax)
    ax.set_title("BSM")
    st.pyplot(fig)
    
    st.subheader("Testy statystyczne")
    
    # HWE for VDR FokI
    st.markdown("## Hardy-Weinberg Test dla VDR FokI")
    genotype_counts_vdr = df['VDR_FokI'].value_counts().to_dict()
    chi_square_vdr, p_value_vdr, observed_vdr, expected_vdr = hardy_weinberg_test_vdr(genotype_counts_vdr)
    st.metric(label="Wartość chi (VDR FokI)", value=f"{chi_square_vdr:.2f}")
    st.metric(label="p-value (VDR FokI)", value=f"{p_value_vdr:.4f}")
     
    # HWE for BSM
    st.markdown("## Hardy-Weinberg test dla BSM")
    genotype_counts_bsm = df['BSM'].value_counts().to_dict()
    chi_square_bsm, p_value_bsm, observed_bsm, expected_bsm = hardy_weinberg_test_bsm(genotype_counts_bsm)
    st.metric(label="Wartość Chi (BSM)", value=f"{chi_square_bsm:.2f}")
    st.metric(label="p-value (BSM)", value=f"{p_value_bsm:.4f}")
    
    # Chi-Square visualization
    st.subheader("Chi-Square - wizualizacja")
    fig, ax = plt.subplots()
    sns.heatmap(np.array([observed_vdr, expected_vdr]), annot=True, cmap="coolwarm", xticklabels=['AA', 'AG', 'GG'], yticklabels=['Observed', 'Expected'], ax=ax)
    ax.set_title("Chi-Square Test - VDR FokI")
    st.pyplot(fig)
    
    fig, ax = plt.subplots()
    sns.heatmap(np.array([observed_bsm, expected_bsm]), annot=True, cmap="coolwarm", xticklabels=['CC', 'CT', 'TT'], yticklabels=['Observed', 'Expected'], ax=ax)
    ax.set_title("Chi-Square Test - BSM")
    st.pyplot(fig)
    
    # Odds Ratio Calculation
    st.markdown("## Odds Ratio Wyniki")
    for col in ["VDR_FokI", "BSM"]:
        cancer = df[df["Group"] == "Cancer"]
        control = df[df["Group"] == "Control"]
        
        cancer_alleles = count_alleles(cancer, col)
        control_alleles = count_alleles(control, col)
        
        a = cancer_alleles.get("A", 0) if col == "VDR_FokI" else cancer_alleles.get("T", 0)
        b = control_alleles.get("A", 0) if col == "VDR_FokI" else control_alleles.get("T", 0)
        c = cancer_alleles.get("G", 0) if col == "VDR_FokI" else cancer_alleles.get("C", 0)
        d = control_alleles.get("G", 0) if col == "VDR_FokI" else control_alleles.get("C", 0)
        
        or_value = odds_ratio(a, b, c, d)
        st.metric(label=f"Odds Ratio ({col})", value=f"{or_value:.2f}")
        
        st.markdown(f"### 2x2 Tableka OR dla {col}")
        table_data = pd.DataFrame({
            "Group": ["Cancer", "Control"],
            f"{col} Allel 1": [a, b],
            f"{col} Allel 2": [c, d]
        })
        st.table(table_data)
        


